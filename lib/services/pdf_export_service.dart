import 'dart:io';
import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:printing/printing.dart';
import 'package:intl/intl.dart';

import '../data/models/report_models.dart';
import '../data/models/user_settings.dart';

class PDFExportService {
  // Кольори відповідно до теми застосунку
  static const PdfColor _primaryColor = PdfColor.fromInt(0xFF4A5CFF);
  static const PdfColor _secondaryColor = PdfColor.fromInt(0xFF7B61FF);
  static const PdfColor _accentColor = PdfColor.fromInt(0xFFFF61DC);

  // Кольори для діапазонів глікемії
  static const PdfColor _veryLowColor = PdfColor.fromInt(0xFFDC3545);
  static const PdfColor _lowColor = PdfColor.fromInt(0xFFEC8130);
  static const PdfColor _targetColor = PdfColor.fromInt(0xFF28A745);
  static const PdfColor _highColor = PdfColor.fromInt(0xFFFFC107);
  static const PdfColor _veryHighColor = PdfColor.fromInt(0xFFDC3545);

  final DateFormat _dateFormat = DateFormat('dd.MM.yyyy');
  final DateFormat _timeFormat = DateFormat('HH:mm');

  /// Генерує PDF звіт
  Future<String> generateGlucoseReport({
    required ReportDataModel reportData,
    required UserSettings settings,
    required String userId,
  }) async {
    final pdf = pw.Document();

    // Завантажуємо шрифти
    final font = await PdfGoogleFonts.robotoRegular();
    final fontBold = await PdfGoogleFonts.robotoBold();

    // Додаємо сторінки звіту
    pdf.addPage(_buildOverviewPage(reportData, settings, font, fontBold));
    pdf.addPage(_buildAnalyticsPage(reportData, settings, font, fontBold));
    pdf.addPage(
      _buildDailyStatisticsPage(reportData, settings, font, fontBold),
    );

    // Зберігаємо файл
    final output = await getTemporaryDirectory();
    final fileName =
        'glucose_report_${_dateFormat.format(reportData.startDate)}_${_dateFormat.format(reportData.endDate)}.pdf';
    final file = File('${output.path}/$fileName');
    await file.writeAsBytes(await pdf.save());

    return file.path;
  }

  /// Створює сторінку огляду
  pw.Page _buildOverviewPage(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Page(
      pageFormat: PdfPageFormat.a4,
      theme: pw.ThemeData.withFont(base: font, bold: fontBold),
      build: (pw.Context context) {
        return pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            // Заголовок звіту
            _buildReportHeader(reportData, fontBold),
            pw.SizedBox(height: 20),

            // Основні метрики
            _buildOverviewMetrics(reportData, settings, font, fontBold),
            pw.SizedBox(height: 20),

            // Time in Range секція
            _buildTimeInRangeSection(reportData, settings, font, fontBold),
            pw.SizedBox(height: 20),

            // Sensor Usage
            _buildSensorUsageSection(reportData, font, fontBold),
            pw.SizedBox(height: 20),

            // Виявлені патерни
            if (reportData.detectedPatterns.isNotEmpty)
              _buildPatternsSection(reportData, font, fontBold),

            pw.Spacer(),

            // Футер
            _buildReportFooter(font),
          ],
        );
      },
    );
  }

  /// Заголовок звіту
  pw.Widget _buildReportHeader(ReportDataModel reportData, pw.Font fontBold) {
    final periodText =
        '${_dateFormat.format(reportData.startDate)} - ${_dateFormat.format(reportData.endDate)}';

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(20),
      decoration: pw.BoxDecoration(
        color: PdfColor.fromInt(0xFFE8EBFF),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Glucose Analysis Report',
            style: pw.TextStyle(
              font: fontBold,
              fontSize: 24,
              color: _primaryColor,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            '${reportData.totalDays} days | $periodText',
            style: pw.TextStyle(fontSize: 14, color: PdfColors.grey700),
          ),
          pw.SizedBox(height: 4),
          pw.Text(
            'Generated by Glucose Companion',
            style: pw.TextStyle(fontSize: 12, color: PdfColors.grey600),
          ),
        ],
      ),
    );
  }

  /// Основні метрики огляду
  pw.Widget _buildOverviewMetrics(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    final units = settings.glucoseUnits == 'mmol_L' ? 'mmol/L' : 'mg/dL';
    final avgGlucose =
        settings.glucoseUnits == 'mmol_L'
            ? reportData.averageGlucose
            : reportData.averageGlucose * 18.0;
    final stdDev =
        settings.glucoseUnits == 'mmol_L'
            ? reportData.standardDeviation
            : reportData.standardDeviation * 18.0;

    return pw.Row(
      children: [
        pw.Expanded(
          child: _buildMetricCard(
            'Average Glucose',
            '${avgGlucose.toStringAsFixed(1)} $units',
            font,
            fontBold,
          ),
        ),
        pw.SizedBox(width: 15),
        pw.Expanded(
          child: _buildMetricCard(
            'Standard Deviation',
            '${stdDev.toStringAsFixed(1)} $units',
            font,
            fontBold,
          ),
        ),
        pw.SizedBox(width: 15),
        pw.Expanded(
          child: _buildMetricCard(
            'Coefficient of Variation',
            '${reportData.coefficientOfVariation.toStringAsFixed(1)}%',
            font,
            fontBold,
          ),
        ),
      ],
    );
  }

  /// Картка метрики
  pw.Widget _buildMetricCard(
    String title,
    String value,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            title,
            style: pw.TextStyle(
              font: font,
              fontSize: 12,
              color: PdfColors.grey600,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            value,
            style: pw.TextStyle(
              font: fontBold,
              fontSize: 18,
              color: _primaryColor,
            ),
          ),
        ],
      ),
    );
  }

  /// Секція Time in Range
  pw.Widget _buildTimeInRangeSection(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    final lowThreshold =
        settings.glucoseUnits == 'mmol_L'
            ? settings.lowThreshold
            : settings.lowThreshold * 18.0;
    final highThreshold =
        settings.glucoseUnits == 'mmol_L'
            ? settings.highThreshold
            : settings.highThreshold * 18.0;
    final units = settings.glucoseUnits == 'mmol_L' ? 'mmol/L' : 'mg/dL';

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Time in Range',
          style: pw.TextStyle(font: fontBold, fontSize: 18),
        ),
        pw.SizedBox(height: 16),

        // TIR візуалізація (горизонтальний бар-чарт)
        pw.Container(
          height: 40,
          child: pw.Row(
            children: [
              if (reportData.timeVeryLow > 0)
                pw.Expanded(
                  flex: (reportData.timeVeryLow * 1000).round(),
                  child: pw.Container(color: _veryLowColor),
                ),
              if (reportData.timeBelowRange > 0)
                pw.Expanded(
                  flex: (reportData.timeBelowRange * 1000).round(),
                  child: pw.Container(color: _lowColor),
                ),
              if (reportData.timeInRange > 0)
                pw.Expanded(
                  flex: (reportData.timeInRange * 1000).round(),
                  child: pw.Container(color: _targetColor),
                ),
              if (reportData.timeAboveRange > 0)
                pw.Expanded(
                  flex: (reportData.timeAboveRange * 1000).round(),
                  child: pw.Container(color: _highColor),
                ),
              if (reportData.timeVeryHigh > 0)
                pw.Expanded(
                  flex: (reportData.timeVeryHigh * 1000).round(),
                  child: pw.Container(color: _veryHighColor),
                ),
            ],
          ),
        ),

        pw.SizedBox(height: 16),

        // TIR статистика
        pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.spaceAround,
          children: [
            if (reportData.timeVeryLow > 0.001)
              _buildTIRStat(
                'Very Low',
                reportData.timeVeryLow,
                _veryLowColor,
                font,
                fontBold,
              ),
            _buildTIRStat(
              'Below Range',
              reportData.timeBelowRange,
              _lowColor,
              font,
              fontBold,
            ),
            _buildTIRStat(
              'In Range',
              reportData.timeInRange,
              _targetColor,
              font,
              fontBold,
            ),
            _buildTIRStat(
              'Above Range',
              reportData.timeAboveRange,
              _highColor,
              font,
              fontBold,
            ),
            if (reportData.timeVeryHigh > 0.001)
              _buildTIRStat(
                'Very High',
                reportData.timeVeryHigh,
                _veryHighColor,
                font,
                fontBold,
              ),
          ],
        ),

        pw.SizedBox(height: 12),
        pw.Text(
          'Target Range: ${lowThreshold.toStringAsFixed(1)}-${highThreshold.toStringAsFixed(1)} $units',
          style: pw.TextStyle(
            font: font,
            fontSize: 12,
            color: PdfColors.grey600,
          ),
        ),
      ],
    );
  }

  /// Статистика TIR
  pw.Widget _buildTIRStat(
    String label,
    double percentage,
    PdfColor color,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Column(
      children: [
        pw.Container(
          width: 16,
          height: 16,
          decoration: pw.BoxDecoration(
            color: color,
            borderRadius: pw.BorderRadius.circular(2),
          ),
        ),
        pw.SizedBox(height: 8),
        pw.Text(
          '${(percentage * 100).toStringAsFixed(0)}%',
          style: pw.TextStyle(font: fontBold, fontSize: 14),
        ),
        pw.Text(
          label,
          style: pw.TextStyle(
            font: font,
            fontSize: 10,
            color: PdfColors.grey600,
          ),
        ),
      ],
    );
  }

  /// Секція використання датчика
  pw.Widget _buildSensorUsageSection(
    ReportDataModel reportData,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Row(
      children: [
        pw.Expanded(
          child: _buildMetricCard(
            'Sensor Usage',
            '${(reportData.sensorUsage * 100).toStringAsFixed(0)}%',
            font,
            fontBold,
          ),
        ),
        pw.SizedBox(width: 15),
        pw.Expanded(
          child: _buildMetricCard(
            'Days with Data',
            '${reportData.activeDays}/${reportData.totalDays} days',
            font,
            fontBold,
          ),
        ),
        pw.SizedBox(width: 15),
        pw.Expanded(
          child: _buildMetricCard(
            'Total Readings',
            '${reportData.totalReadings}',
            font,
            fontBold,
          ),
        ),
      ],
    );
  }

  /// Секція виявлених патернів
  pw.Widget _buildPatternsSection(
    ReportDataModel reportData,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Detected Patterns',
          style: pw.TextStyle(font: fontBold, fontSize: 18),
        ),
        pw.SizedBox(height: 16),
        ...reportData.detectedPatterns
            .map(
              (pattern) => pw.Container(
                margin: const pw.EdgeInsets.only(bottom: 12),
                padding: const pw.EdgeInsets.all(12),
                decoration: pw.BoxDecoration(
                  color: _getSeverityColorLight(pattern.severity),
                  borderRadius: pw.BorderRadius.circular(8),
                ),
                child: pw.Row(
                  children: [
                    pw.Container(
                      width: 4,
                      height: 40,
                      decoration: pw.BoxDecoration(
                        color: _getSeverityColor(pattern.severity),
                        borderRadius: pw.BorderRadius.circular(2),
                      ),
                    ),
                    pw.SizedBox(width: 12),
                    pw.Expanded(
                      child: pw.Column(
                        crossAxisAlignment: pw.CrossAxisAlignment.start,
                        children: [
                          pw.Text(
                            pattern.title,
                            style: pw.TextStyle(font: fontBold, fontSize: 14),
                          ),
                          pw.SizedBox(height: 4),
                          pw.Text(
                            pattern.description,
                            style: pw.TextStyle(font: font, fontSize: 12),
                          ),
                        ],
                      ),
                    ),
                    pw.Text(
                      '${pattern.percentage.toStringAsFixed(0)}%',
                      style: pw.TextStyle(
                        font: fontBold,
                        fontSize: 16,
                        color: _getSeverityColor(pattern.severity),
                      ),
                    ),
                  ],
                ),
              ),
            )
            .toList(),
      ],
    );
  }

  /// Сторінка аналітики
  pw.Page _buildAnalyticsPage(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Page(
      pageFormat: PdfPageFormat.a4,
      theme: pw.ThemeData.withFont(base: font, bold: fontBold),
      build: (pw.Context context) {
        return pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'Detailed Analytics',
              style: pw.TextStyle(
                font: fontBold,
                fontSize: 24,
                color: _primaryColor,
              ),
            ),
            pw.SizedBox(height: 20),

            // Детальна статистика
            _buildDetailedStatistics(reportData, settings, font, fontBold),
            pw.SizedBox(height: 20),

            // Годинна статистика (якщо є дані)
            if (reportData.hourlyStats.isNotEmpty)
              _buildHourlyStatistics(reportData, settings, font, fontBold),
          ],
        );
      },
    );
  }

  /// Детальна статистика
  pw.Widget _buildDetailedStatistics(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    final units = settings.glucoseUnits == 'mmol_L' ? 'mmol/L' : 'mg/dL';
    final avgGlucose =
        settings.glucoseUnits == 'mmol_L'
            ? reportData.averageGlucose
            : reportData.averageGlucose * 18.0;

    return pw.Table(
      border: pw.TableBorder.all(color: PdfColors.grey300),
      children: [
        pw.TableRow(
          decoration: const pw.BoxDecoration(color: PdfColors.grey100),
          children: [
            _buildTableHeader('Metric', fontBold),
            _buildTableHeader('Value', fontBold),
            _buildTableHeader('Target', fontBold),
            _buildTableHeader('Status', fontBold),
          ],
        ),
        _buildStatRow(
          'Average Glucose',
          '${avgGlucose.toStringAsFixed(1)} $units',
          settings.glucoseUnits == 'mmol_L' ? '<8.5 mmol/L' : '<153 mg/dL',
          avgGlucose < (settings.glucoseUnits == 'mmol_L' ? 8.5 : 153)
              ? 'Good'
              : 'High',
          font,
        ),
        _buildStatRow(
          'Time in Range',
          '${(reportData.timeInRange * 100).toStringAsFixed(0)}%',
          '>70%',
          reportData.timeInRange > 0.7 ? 'Good' : 'Needs Improvement',
          font,
        ),
        _buildStatRow(
          'Time Above Range',
          '${(reportData.timeAboveRange * 100).toStringAsFixed(0)}%',
          '<25%',
          reportData.timeAboveRange < 0.25 ? 'Good' : 'High',
          font,
        ),
        _buildStatRow(
          'Time Below Range',
          '${(reportData.timeBelowRange * 100).toStringAsFixed(0)}%',
          '<4%',
          reportData.timeBelowRange < 0.04 ? 'Good' : 'High',
          font,
        ),
        _buildStatRow(
          'Coefficient of Variation',
          '${reportData.coefficientOfVariation.toStringAsFixed(1)}%',
          '<36%',
          reportData.coefficientOfVariation < 36 ? 'Good' : 'High Variability',
          font,
        ),
        _buildStatRow(
          'GMI',
          '${reportData.gmi.toStringAsFixed(1)}%',
          '<7%',
          reportData.gmi < 7 ? 'Good' : 'High',
          font,
        ),
      ],
    );
  }

  /// Заголовок таблиці
  pw.Widget _buildTableHeader(String text, pw.Font fontBold) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(text, style: pw.TextStyle(font: fontBold, fontSize: 12)),
    );
  }

  /// Рядок статистики
  pw.TableRow _buildStatRow(
    String metric,
    String value,
    String target,
    String status,
    pw.Font font,
  ) {
    return pw.TableRow(
      children: [
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(metric, style: pw.TextStyle(font: font, fontSize: 11)),
        ),
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(value, style: pw.TextStyle(font: font, fontSize: 11)),
        ),
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(
            target,
            style: pw.TextStyle(
              font: font,
              fontSize: 11,
              color: PdfColors.grey600,
            ),
          ),
        ),
        pw.Padding(
          padding: const pw.EdgeInsets.all(8),
          child: pw.Text(
            status,
            style: pw.TextStyle(
              font: font,
              fontSize: 11,
              color: _getStatusColor(status),
            ),
          ),
        ),
      ],
    );
  }

  /// Годинна статистика
  pw.Widget _buildHourlyStatistics(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    // Відображаємо тільки перші 12 годин на цій сторінці
    final firstHalf = reportData.hourlyStats.take(12).toList();

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          'Hourly Statistics (00:00-11:59)',
          style: pw.TextStyle(font: fontBold, fontSize: 18),
        ),
        pw.SizedBox(height: 16),

        pw.Table(
          border: pw.TableBorder.all(color: PdfColors.grey300),
          columnWidths: {
            0: const pw.FixedColumnWidth(50),
            1: const pw.FlexColumnWidth(1),
            2: const pw.FlexColumnWidth(1),
            3: const pw.FlexColumnWidth(1),
            4: const pw.FlexColumnWidth(1),
          },
          children: [
            pw.TableRow(
              decoration: const pw.BoxDecoration(color: PdfColors.grey100),
              children: [
                _buildTableHeader('Hour', fontBold),
                _buildTableHeader('Avg', fontBold),
                _buildTableHeader('TIR%', fontBold),
                _buildTableHeader('TAR%', fontBold),
                _buildTableHeader('TBR%', fontBold),
              ],
            ),
            ...firstHalf
                .map(
                  (stat) => pw.TableRow(
                    children: [
                      _buildTableCell(
                        '${stat.hour.toString().padLeft(2, '0')}:00',
                        font,
                      ),
                      _buildTableCell(
                        stat.averageGlucose.toStringAsFixed(1),
                        font,
                      ),
                      _buildTableCell(
                        (stat.timeInRange * 100).toStringAsFixed(0),
                        font,
                      ),
                      _buildTableCell(
                        (stat.timeAboveRange * 100).toStringAsFixed(0),
                        font,
                      ),
                      _buildTableCell(
                        (stat.timeBelowRange * 100).toStringAsFixed(0),
                        font,
                      ),
                    ],
                  ),
                )
                .toList(),
          ],
        ),
      ],
    );
  }

  /// Сторінка щоденної статистики
  pw.Page _buildDailyStatisticsPage(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    return pw.Page(
      pageFormat: PdfPageFormat.a4,
      theme: pw.ThemeData.withFont(base: font, bold: fontBold),
      build: (pw.Context context) {
        return pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'Daily Statistics',
              style: pw.TextStyle(
                font: fontBold,
                fontSize: 24,
                color: _primaryColor,
              ),
            ),
            pw.SizedBox(height: 20),

            // Таблиця щоденної статистики
            _buildDailyStatsTable(reportData, settings, font, fontBold),
          ],
        );
      },
    );
  }

  /// Таблиця щоденної статистики
  pw.Widget _buildDailyStatsTable(
    ReportDataModel reportData,
    UserSettings settings,
    pw.Font font,
    pw.Font fontBold,
  ) {
    final units = settings.glucoseUnits == 'mmol_L' ? 'mmol/L' : 'mg/dL';

    return pw.Table(
      border: pw.TableBorder.all(color: PdfColors.grey300),
      columnWidths: {
        0: const pw.FixedColumnWidth(80),
        1: const pw.FlexColumnWidth(1),
        2: const pw.FlexColumnWidth(1),
        3: const pw.FlexColumnWidth(1),
        4: const pw.FlexColumnWidth(1),
        5: const pw.FlexColumnWidth(1),
      },
      children: [
        pw.TableRow(
          decoration: const pw.BoxDecoration(color: PdfColors.grey100),
          children: [
            _buildTableHeader('Date', fontBold),
            _buildTableHeader('Avg ($units)', fontBold),
            _buildTableHeader('TIR (%)', fontBold),
            _buildTableHeader('TAR (%)', fontBold),
            _buildTableHeader('TBR (%)', fontBold),
            _buildTableHeader('Readings', fontBold),
          ],
        ),
        ...reportData.dailyStats
            .map(
              (stat) => pw.TableRow(
                children: [
                  _buildTableCell(_dateFormat.format(stat.date), font),
                  _buildTableCell(
                    (settings.glucoseUnits == 'mmol_L'
                            ? stat.averageGlucose
                            : stat.averageGlucose * 18.0)
                        .toStringAsFixed(1),
                    font,
                  ),
                  _buildTableCell(
                    (stat.timeInRange * 100).toStringAsFixed(0),
                    font,
                  ),
                  _buildTableCell(
                    (stat.timeAboveRange * 100).toStringAsFixed(0),
                    font,
                  ),
                  _buildTableCell(
                    (stat.timeBelowRange * 100).toStringAsFixed(0),
                    font,
                  ),
                  _buildTableCell(stat.totalReadings.toString(), font),
                ],
              ),
            )
            .toList(),
      ],
    );
  }

  /// Комірка таблиці
  pw.Widget _buildTableCell(String text, pw.Font font) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(6),
      child: pw.Text(text, style: pw.TextStyle(font: font, fontSize: 10)),
    );
  }

  /// Футер звіту
  pw.Widget _buildReportFooter(pw.Font font) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: const pw.BoxDecoration(
        border: pw.Border(top: pw.BorderSide(color: PdfColors.grey300)),
      ),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text(
            'Generated by Glucose Companion App',
            style: pw.TextStyle(
              font: font,
              fontSize: 10,
              color: PdfColors.grey600,
            ),
          ),
          pw.Text(
            'Generated on: ${_dateFormat.format(DateTime.now())} at ${_timeFormat.format(DateTime.now())}',
            style: pw.TextStyle(
              font: font,
              fontSize: 10,
              color: PdfColors.grey600,
            ),
          ),
        ],
      ),
    );
  }

  /// Отримує колір за рівнем серйозності
  PdfColor _getSeverityColor(String severity) {
    switch (severity) {
      case 'high':
        return _veryHighColor;
      case 'moderate':
        return _highColor;
      case 'low':
        return _lowColor;
      default:
        return PdfColors.grey;
    }
  }

  /// Отримує колір за статусом
  PdfColor _getStatusColor(String status) {
    if (status.contains('Good')) {
      return _targetColor;
    } else if (status.contains('High') ||
        status.contains('Needs Improvement')) {
      return _highColor;
    }
    return PdfColors.grey;
  }

  /// Отримує світлий колір за рівнем серйозності
  PdfColor _getSeverityColorLight(String severity) {
    switch (severity) {
      case 'high':
        return PdfColor.fromInt(0xFFFDEDED); // світлий червоний
      case 'moderate':
        return PdfColor.fromInt(0xFFFFF3CD); // світлий жовтий
      case 'low':
        return PdfColor.fromInt(0xFFFFEBD6); // світлий помаранчевий
      default:
        return PdfColor.fromInt(0xFFF8F9FA); // світлий сірий
    }
  }

  /// Поділення створеного файлу
  Future<void> shareReport(String filePath) async {
    await Share.shareXFiles([XFile(filePath)], text: 'Glucose Analysis Report');
  }

  /// Попередній перегляд звіту
  Future<void> previewReport(Uint8List pdfData) async {
    await Printing.layoutPdf(onLayout: (PdfPageFormat format) async => pdfData);
  }

  /// Підсумкова секція з рекомендаціями

  /// Генерує основні висновки на основі даних

  /// Генерує рекомендації на основі аналізу даних

  /// Створює CSV експорт даних (додаткова функціональність)
  Future<String> generateCSVReport({
    required ReportDataModel reportData,
    required UserSettings settings,
    required String userId,
  }) async {
    final csvData = StringBuffer();
    final units = settings.glucoseUnits == 'mmol_L' ? 'mmol/L' : 'mg/dL';

    // Заголовок CSV
    csvData.writeln('Glucose Companion - Data Export');
    csvData.writeln(
      'Report Period,${_dateFormat.format(reportData.startDate)} - ${_dateFormat.format(reportData.endDate)}',
    );
    csvData.writeln(
      'Generated,${_dateFormat.format(DateTime.now())} ${_timeFormat.format(DateTime.now())}',
    );
    csvData.writeln('');

    // Основна статистика
    csvData.writeln('SUMMARY STATISTICS');
    csvData.writeln('Metric,Value,Unit');
    csvData.writeln(
      'Average Glucose,${(settings.glucoseUnits == 'mmol_L' ? reportData.averageGlucose : reportData.averageGlucose * 18.0).toStringAsFixed(1)},$units',
    );
    csvData.writeln(
      'Standard Deviation,${(settings.glucoseUnits == 'mmol_L' ? reportData.standardDeviation : reportData.standardDeviation * 18.0).toStringAsFixed(1)},$units',
    );
    csvData.writeln(
      'Coefficient of Variation,${reportData.coefficientOfVariation.toStringAsFixed(1)},%',
    );
    csvData.writeln(
      'Time in Range,${(reportData.timeInRange * 100).toStringAsFixed(1)},%',
    );
    csvData.writeln(
      'Time Above Range,${(reportData.timeAboveRange * 100).toStringAsFixed(1)},%',
    );
    csvData.writeln(
      'Time Below Range,${(reportData.timeBelowRange * 100).toStringAsFixed(1)},%',
    );
    csvData.writeln('GMI,${reportData.gmi.toStringAsFixed(1)},%');
    csvData.writeln('Total Readings,${reportData.totalReadings},count');
    csvData.writeln(
      'Sensor Usage,${(reportData.sensorUsage * 100).toStringAsFixed(1)},%',
    );
    csvData.writeln('');

    // Щоденна статистика
    csvData.writeln('DAILY STATISTICS');
    csvData.writeln(
      'Date,Average Glucose ($units),TIR (%),TAR (%),TBR (%),Readings',
    );
    for (final stat in reportData.dailyStats) {
      final avgGlucose =
          settings.glucoseUnits == 'mmol_L'
              ? stat.averageGlucose
              : stat.averageGlucose * 18.0;
      csvData.writeln(
        '${_dateFormat.format(stat.date)},${avgGlucose.toStringAsFixed(1)},${(stat.timeInRange * 100).toStringAsFixed(0)},${(stat.timeAboveRange * 100).toStringAsFixed(0)},${(stat.timeBelowRange * 100).toStringAsFixed(0)},${stat.totalReadings}',
      );
    }
    csvData.writeln('');

    // Погодинна статистика
    if (reportData.hourlyStats.isNotEmpty) {
      csvData.writeln('HOURLY STATISTICS');
      csvData.writeln(
        'Hour,Average Glucose ($units),TIR (%),TAR (%),TBR (%),Readings',
      );
      for (final stat in reportData.hourlyStats) {
        final avgGlucose =
            settings.glucoseUnits == 'mmol_L'
                ? stat.averageGlucose
                : stat.averageGlucose * 18.0;
        csvData.writeln(
          '${stat.hour.toString().padLeft(2, '0')}:00,${avgGlucose.toStringAsFixed(1)},${(stat.timeInRange * 100).toStringAsFixed(0)},${(stat.timeAboveRange * 100).toStringAsFixed(0)},${(stat.timeBelowRange * 100).toStringAsFixed(0)},${stat.totalReadings}',
        );
      }
      csvData.writeln('');
    }

    // Виявлені патерни
    if (reportData.detectedPatterns.isNotEmpty) {
      csvData.writeln('DETECTED PATTERNS');
      csvData.writeln('Pattern,Description,Severity,Percentage');
      for (final pattern in reportData.detectedPatterns) {
        csvData.writeln(
          '${pattern.title},"${pattern.description}",${pattern.severity},${pattern.percentage.toStringAsFixed(1)}%',
        );
      }
      csvData.writeln('');
    }

    // Зберігаємо CSV файл
    final output = await getTemporaryDirectory();
    final fileName =
        'glucose_data_${_dateFormat.format(reportData.startDate)}_${_dateFormat.format(reportData.endDate)}.csv';
    final file = File('${output.path}/$fileName');
    await file.writeAsString(csvData.toString());

    return file.path;
  }

  /// Валідує дані перед експортом
  bool validateReportData(ReportDataModel reportData) {
    // Перевіряємо базові вимоги
    if (reportData.totalReadings == 0) return false;
    if (reportData.startDate.isAfter(reportData.endDate)) return false;
    if (reportData.averageGlucose <= 0) return false;

    return true;
  }

  /// Отримує розмір файлу як читабельний рядок
  String _getFileSizeString(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  /// Очищує тимчасові файли (викликати періодично)
  Future<void> cleanupTempFiles() async {
    try {
      final tempDir = await getTemporaryDirectory();
      final files = tempDir.listSync();

      for (final file in files) {
        if (file is File &&
            (file.path.endsWith('.pdf') || file.path.endsWith('.csv')) &&
            file.path.contains('glucose_')) {
          // Видаляємо файли старше 24 годин
          final stat = await file.stat();
          final age = DateTime.now().difference(stat.modified);

          if (age.inHours > 24) {
            await file.delete();
          }
        }
      }
    } catch (e) {
      // Ігноруємо помилки очищення
      print('Warning: Could not cleanup temp files: $e');
    }
  }

  Future<Uint8List> generateReportBytes({
    required ReportDataModel reportData,
    required UserSettings settings,
    required String userId,
  }) async {
    final pdf = pw.Document();

    // Завантажуємо шрифти
    final font = await PdfGoogleFonts.robotoRegular();
    final fontBold = await PdfGoogleFonts.robotoBold();

    // Додаємо сторінки звіту
    pdf.addPage(_buildOverviewPage(reportData, settings, font, fontBold));
    pdf.addPage(_buildAnalyticsPage(reportData, settings, font, fontBold));
    pdf.addPage(
      _buildDailyStatisticsPage(reportData, settings, font, fontBold),
    );

    return await pdf.save();
  }
}
